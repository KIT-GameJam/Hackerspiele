[gd_resource type="VisualShader" load_steps=9 format=3 uid="uid://bvr20ih1drcn"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_tjndk"]
parameter_name = "BoundaryWidthV"
hint = 1
max = 0.5
default_value_enabled = true
default_value = 0.1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_tjndk"]
size = Vector2(500, 280)
expression = "//alpha_out = rgba_bg.z + alpha_fg - rgba_bg.z * alpha_fg;
rgb_out = rgba_bg.xyz ; //* alpha_fg; // don't multiply alpha to avoid over 
alpha_out = rgba_bg.w * alpha_fg;
//alpha_out = 1.;
//rgb_out = vec3(alpha_fg, 0.,0.);"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_u4ldq"]
parameter_name = "smooth_exponent"
hint = 1
default_value_enabled = true
default_value = 0.6

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_tjndk"]
input_name = "color"

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_u4ldq"]
default_input_values = [0, Quaternion(0, 0, 0, 0)]
op_type = 2

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_3b7io"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3b7io"]
input_name = "uv"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_42ap4"]
size = Vector2(480, 280)
expression = "//float border_v = 0.1;
// smooth gradient by applying a root
//float smooth_exponent = 0.6;
float dist = (uv.y < 0.5)? uv.y : (1. - uv.y);
alpha = pow(clamp(dist / border_v, 0., 1.), smooth_exponent);
//alpha = dist;
"

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float BoundaryWidthV : hint_range(0.0, 0.5) = 0.10000000149012;
uniform float smooth_exponent : hint_range(0.0, 1.0) = 0.60000002384186;



void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;


// Input:8
	vec2 n_out8p0 = UV;


// FloatParameter:10
	float n_out10p0 = BoundaryWidthV;


// FloatParameter:12
	float n_out12p0 = smooth_exponent;


	float n_out9p0;
// Expression:9
	n_out9p0 = 0.0;
	{
		//float n_out10p0 = 0.1;
		// smooth gradient by applying a root
		//float n_out12p0 = 0.6;
		float dist = (n_out8p0.y < 0.5)? n_out8p0.y : (1. - n_out8p0.y);
		n_out9p0 = pow(clamp(dist / n_out10p0, 0., 1.), n_out12p0);
		//n_out9p0 = dist;
		
	}


	vec3 n_out11p0;
	float n_out11p1;
// Expression:11
	n_out11p0 = vec3(0.0, 0.0, 0.0);
	n_out11p1 = 0.0;
	{
		//n_out11p1 = n_out2p0.z + n_out9p0 - n_out2p0.z * n_out9p0;
		n_out11p0 = n_out2p0.xyz ; //* n_out9p0; // don't multiply alpha to avoid over 
		n_out11p1 = n_out2p0.w * n_out9p0;
		//n_out11p1 = 1.;
		//n_out11p0 = vec3(n_out9p0, 0.,0.);
	}


// Output:0
	COLOR.rgb = n_out11p0;
	COLOR.a = n_out11p1;


}
"
graph_offset = Vector2(-774.354, 151.933)
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(860, 40)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_tjndk")
nodes/fragment/2/position = Vector2(-580, 100)
nodes/fragment/3/node = SubResource("VisualShaderNodeVectorDecompose_u4ldq")
nodes/fragment/3/position = Vector2(0, 80)
nodes/fragment/4/node = SubResource("VisualShaderNodeVectorCompose_3b7io")
nodes/fragment/4/position = Vector2(240, 60)
nodes/fragment/8/node = SubResource("VisualShaderNodeInput_3b7io")
nodes/fragment/8/position = Vector2(-780, 300)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_42ap4")
nodes/fragment/9/position = Vector2(-420, 340)
nodes/fragment/9/size = Vector2(480, 280)
nodes/fragment/9/input_ports = "0,3,uv;1,0,border_v;2,0,smooth_exponent;"
nodes/fragment/9/output_ports = "0,0,alpha;"
nodes/fragment/9/expression = "//float border_v = 0.1;
// smooth gradient by applying a root
//float smooth_exponent = 0.6;
float dist = (uv.y < 0.5)? uv.y : (1. - uv.y);
alpha = pow(clamp(dist / border_v, 0., 1.), smooth_exponent);
//alpha = dist;
"
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatParameter_tjndk")
nodes/fragment/10/position = Vector2(-920, 400)
nodes/fragment/11/node = SubResource("VisualShaderNodeExpression_tjndk")
nodes/fragment/11/position = Vector2(220, 280)
nodes/fragment/11/size = Vector2(500, 280)
nodes/fragment/11/input_ports = "0,5,rgba_bg;1,0,alpha_fg;"
nodes/fragment/11/output_ports = "0,4,rgb_out;1,0,alpha_out;"
nodes/fragment/11/expression = "//alpha_out = rgba_bg.z + alpha_fg - rgba_bg.z * alpha_fg;
rgb_out = rgba_bg.xyz ; //* alpha_fg; // don't multiply alpha to avoid over 
alpha_out = rgba_bg.w * alpha_fg;
//alpha_out = 1.;
//rgb_out = vec3(alpha_fg, 0.,0.);"
nodes/fragment/12/node = SubResource("VisualShaderNodeFloatParameter_u4ldq")
nodes/fragment/12/position = Vector2(-1240, 540)
nodes/fragment/connections = PackedInt32Array(3, 0, 4, 0, 3, 1, 4, 1, 3, 2, 4, 2, 2, 0, 3, 0, 8, 0, 9, 0, 10, 0, 9, 1, 9, 0, 11, 1, 11, 1, 0, 1, 2, 0, 11, 0, 11, 0, 0, 0, 12, 0, 9, 2)
