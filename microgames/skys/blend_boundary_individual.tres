[gd_resource type="VisualShader" load_steps=10 format=3 uid="uid://y0epm2flhv73"]

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_tjndk"]
parameter_name = "bordder_v0"
hint = 1
default_value_enabled = true
default_value = 0.1

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_tjndk"]
size = Vector2(500, 460)
expression = "//alpha_out = rgba_bg.z + alpha_fg - rgba_bg.z * alpha_fg;
rgb_out = rgba_bg.xyz; //* alpha_fg; // don't multiply alpha to avoid over 
alpha_out = rgba_bg.w * alpha_fg;
//alpha_out = rgba_bg.w;
//rgb_out = vec3(rgba_bg.z,0.,0.);
//alpha_out = 1.;
//rgb_out = vec3(alpha_fg, 0.,0.);
"

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_4g7f0"]
parameter_name = "border_u0"
hint = 1
default_value_enabled = true
default_value = 0.1

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_l750g"]
parameter_name = "border_v1"
hint = 1
default_value_enabled = true
default_value = 0.1

[sub_resource type="VisualShaderNodeFloatParameter" id="VisualShaderNodeFloatParameter_vg8bl"]
parameter_name = "border_u1"
hint = 1
default_value_enabled = true
default_value = 0.1

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_ofpg7"]
default_input_values = [0, 0.0, 1, 0.0, 2, 0.0, 3, 0.0]
op_type = 2

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_tjndk"]
input_name = "color"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_3b7io"]
input_name = "uv"

[sub_resource type="VisualShaderNodeExpression" id="VisualShaderNodeExpression_42ap4"]
size = Vector2(540, 540)
expression = "//float border_v = 0.1;
// smooth gradient by applying a root
float smooth_exponent = 0.6;
//float dist = (uv.y < 0.5)? uv.y : (1. - uv.y);
vec4 dist = vec4(uv, vec2(1.) - uv);
vec4 alphas = pow(clamp(dist / borders, 0., 1.), vec4(smooth_exponent));
alpha = alphas.x * alphas.y * alphas.z * alphas.w;
"

[resource]
code = "shader_type canvas_item;
render_mode blend_mix;

uniform float bordder_v0 : hint_range(0.0, 1.0) = 0.10000000149012;
uniform float border_u0 : hint_range(0.0, 1.0) = 0.10000000149012;
uniform float border_u1 : hint_range(0.0, 1.0) = 0.10000000149012;
uniform float border_v1 : hint_range(0.0, 1.0) = 0.10000000149012;



void fragment() {
// Input:2
	vec4 n_out2p0 = COLOR;


// Input:8
	vec2 n_out8p0 = UV;


// FloatParameter:10
	float n_out10p0 = bordder_v0;


// FloatParameter:13
	float n_out13p0 = border_u0;


// FloatParameter:15
	float n_out15p0 = border_u1;


// FloatParameter:14
	float n_out14p0 = border_v1;


// VectorCompose:16
	vec4 n_out16p0 = vec4(n_out13p0, n_out10p0, n_out15p0, n_out14p0);


	float n_out9p0;
// Expression:9
	n_out9p0 = 0.0;
	{
		//float n_out10p0 = 0.1;
		// smooth gradient by applying a root
		float smooth_exponent = 0.6;
		//float dist = (n_out8p0.y < 0.5)? n_out8p0.y : (1. - n_out8p0.y);
		vec4 dist = vec4(n_out8p0, vec2(1.) - n_out8p0);
		vec4 alphas = pow(clamp(dist / n_out16p0, 0., 1.), vec4(smooth_exponent));
		n_out9p0 = alphas.x * alphas.y * alphas.z * alphas.w;
		
	}


	vec3 n_out11p0;
	float n_out11p1;
// Expression:11
	n_out11p0 = vec3(0.0, 0.0, 0.0);
	n_out11p1 = 0.0;
	{
		//n_out11p1 = n_out2p0.z + n_out9p0 - n_out2p0.z * n_out9p0;
		n_out11p0 = n_out2p0.xyz; //* n_out9p0; // don't multiply alpha to avoid over 
		n_out11p1 = n_out2p0.w * n_out9p0;
		//n_out11p1 = n_out2p0.w;
		//n_out11p0 = vec3(n_out2p0.z,0.,0.);
		//n_out11p1 = 1.;
		//n_out11p0 = vec3(n_out9p0, 0.,0.);
		
	}


// Output:0
	COLOR.rgb = n_out11p0;
	COLOR.a = n_out11p1;


}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2(860, 40)
nodes/fragment/2/node = SubResource("VisualShaderNodeInput_tjndk")
nodes/fragment/2/position = Vector2(-580, 100)
nodes/fragment/8/node = SubResource("VisualShaderNodeInput_3b7io")
nodes/fragment/8/position = Vector2(-780, 300)
nodes/fragment/9/node = SubResource("VisualShaderNodeExpression_42ap4")
nodes/fragment/9/position = Vector2(-420, 340)
nodes/fragment/9/size = Vector2(540, 540)
nodes/fragment/9/input_ports = "0,3,uv;1,0,border_v;2,5,borders;"
nodes/fragment/9/output_ports = "0,0,alpha;"
nodes/fragment/9/expression = "//float border_v = 0.1;
// smooth gradient by applying a root
float smooth_exponent = 0.6;
//float dist = (uv.y < 0.5)? uv.y : (1. - uv.y);
vec4 dist = vec4(uv, vec2(1.) - uv);
vec4 alphas = pow(clamp(dist / borders, 0., 1.), vec4(smooth_exponent));
alpha = alphas.x * alphas.y * alphas.z * alphas.w;
"
nodes/fragment/10/node = SubResource("VisualShaderNodeFloatParameter_tjndk")
nodes/fragment/10/position = Vector2(-1240, 320)
nodes/fragment/11/node = SubResource("VisualShaderNodeExpression_tjndk")
nodes/fragment/11/position = Vector2(240, 240)
nodes/fragment/11/size = Vector2(500, 460)
nodes/fragment/11/input_ports = "0,5,rgba_bg;1,0,alpha_fg;"
nodes/fragment/11/output_ports = "0,4,rgb_out;1,0,alpha_out;"
nodes/fragment/11/expression = "//alpha_out = rgba_bg.z + alpha_fg - rgba_bg.z * alpha_fg;
rgb_out = rgba_bg.xyz; //* alpha_fg; // don't multiply alpha to avoid over 
alpha_out = rgba_bg.w * alpha_fg;
//alpha_out = rgba_bg.w;
//rgb_out = vec3(rgba_bg.z,0.,0.);
//alpha_out = 1.;
//rgb_out = vec3(alpha_fg, 0.,0.);
"
nodes/fragment/13/node = SubResource("VisualShaderNodeFloatParameter_4g7f0")
nodes/fragment/13/position = Vector2(-1260, 1000)
nodes/fragment/14/node = SubResource("VisualShaderNodeFloatParameter_l750g")
nodes/fragment/14/position = Vector2(-1300, 680)
nodes/fragment/15/node = SubResource("VisualShaderNodeFloatParameter_vg8bl")
nodes/fragment/15/position = Vector2(-980, 1120)
nodes/fragment/16/node = SubResource("VisualShaderNodeVectorCompose_ofpg7")
nodes/fragment/16/position = Vector2(-643.666, 667.077)
nodes/fragment/connections = PackedInt32Array(8, 0, 9, 0, 10, 0, 9, 1, 9, 0, 11, 1, 2, 0, 11, 0, 11, 0, 0, 0, 10, 0, 16, 1, 14, 0, 16, 3, 13, 0, 16, 0, 15, 0, 16, 2, 16, 0, 9, 2, 11, 1, 0, 1)
